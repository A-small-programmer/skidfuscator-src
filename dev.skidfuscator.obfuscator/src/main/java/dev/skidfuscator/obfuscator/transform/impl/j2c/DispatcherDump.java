package dev.skidfuscator.obfuscator.transform.impl.j2c;

import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;

public class DispatcherDump implements Opcodes {

    public static byte[] dump() throws Exception {

        ClassWriter classWriter = new ClassWriter(0);
        FieldVisitor fieldVisitor;
        RecordComponentVisitor recordComponentVisitor;
        MethodVisitor methodVisitor;
        AnnotationVisitor annotationVisitor0;

        classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, "skid/Dispatcher", null, "java/lang/Object", null);

        classWriter.visitSource("Dispatcher.java", null);

        {
            fieldVisitor = classWriter.visitField(ACC_PUBLIC | ACC_STATIC, "loaded", "I", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PUBLIC | ACC_STATIC, "OS_NAME", "Ljava/lang/String;", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PUBLIC | ACC_STATIC, "OS_ARCH", "Ljava/lang/String;", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_STATIC, "WINDOWS", "I", null, Integer.valueOf(0));
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_STATIC, "OSX", "I", null, Integer.valueOf(1));
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_STATIC, "SOLARIS", "I", null, Integer.valueOf(2));
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_STATIC, "LINUX", "I", null, Integer.valueOf(3));
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_STATIC, "X86_32", "I", null, Integer.valueOf(0));
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_STATIC, "X86_64", "I", null, Integer.valueOf(1));
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_STATIC, "AMD_64", "I", null, Integer.valueOf(2));
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_STATIC, "AARCH_64", "I", null, Integer.valueOf(3));
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_STATIC, "PPC", "I", null, Integer.valueOf(4));
            fieldVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(7, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            methodVisitor.visitInsn(RETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lskid/Dispatcher;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "load", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/io/IOException");
            Label label3 = new Label();
            Label label4 = new Label();
            Label label5 = new Label();
            methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/lang/Throwable");
            Label label6 = new Label();
            Label label7 = new Label();
            Label label8 = new Label();
            methodVisitor.visitTryCatchBlock(label6, label7, label8, "java/lang/Throwable");
            Label label9 = new Label();
            Label label10 = new Label();
            Label label11 = new Label();
            methodVisitor.visitTryCatchBlock(label9, label10, label11, "java/lang/Throwable");
            Label label12 = new Label();
            Label label13 = new Label();
            Label label14 = new Label();
            methodVisitor.visitTryCatchBlock(label12, label13, label14, "java/lang/Throwable");
            Label label15 = new Label();
            Label label16 = new Label();
            Label label17 = new Label();
            methodVisitor.visitTryCatchBlock(label15, label16, label17, "java/io/IOException");
            Label label18 = new Label();
            methodVisitor.visitLabel(label18);
            methodVisitor.visitLineNumber(28, label18);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "loaded", "I");
            Label label19 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label19);
            Label label20 = new Label();
            methodVisitor.visitLabel(label20);
            methodVisitor.visitLineNumber(29, label20);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "loaded", "I");
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(IADD);
            methodVisitor.visitFieldInsn(PUTSTATIC, "skid/Dispatcher", "loaded", "I");
            Label label21 = new Label();
            methodVisitor.visitLabel(label21);
            methodVisitor.visitLineNumber(30, label21);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitLabel(label19);
            methodVisitor.visitLineNumber(33, label19);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "loaded", "I");
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(IADD);
            methodVisitor.visitFieldInsn(PUTSTATIC, "skid/Dispatcher", "loaded", "I");
            Label label22 = new Label();
            methodVisitor.visitLabel(label22);
            methodVisitor.visitLineNumber(37, label22);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "OS_NAME", "Ljava/lang/String;");
            methodVisitor.visitLdcInsn("Windows");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
            Label label23 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label23);
            Label label24 = new Label();
            methodVisitor.visitLabel(label24);
            methodVisitor.visitLineNumber(38, label24);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 0);
            Label label25 = new Label();
            methodVisitor.visitLabel(label25);
            Label label26 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label26);
            methodVisitor.visitLabel(label23);
            methodVisitor.visitLineNumber(39, label23);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "OS_NAME", "Ljava/lang/String;");
            methodVisitor.visitLdcInsn("Mac OS X");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
            Label label27 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label27);
            Label label28 = new Label();
            methodVisitor.visitLabel(label28);
            methodVisitor.visitLineNumber(40, label28);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitVarInsn(ISTORE, 0);
            Label label29 = new Label();
            methodVisitor.visitLabel(label29);
            methodVisitor.visitJumpInsn(GOTO, label26);
            methodVisitor.visitLabel(label27);
            methodVisitor.visitLineNumber(41, label27);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "OS_NAME", "Ljava/lang/String;");
            methodVisitor.visitLdcInsn("Solaris");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
            Label label30 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label30);
            Label label31 = new Label();
            methodVisitor.visitLabel(label31);
            methodVisitor.visitLineNumber(42, label31);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitVarInsn(ISTORE, 0);
            Label label32 = new Label();
            methodVisitor.visitLabel(label32);
            methodVisitor.visitJumpInsn(GOTO, label26);
            methodVisitor.visitLabel(label30);
            methodVisitor.visitLineNumber(43, label30);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "OS_NAME", "Ljava/lang/String;");
            methodVisitor.visitLdcInsn("Linux");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
            Label label33 = new Label();
            methodVisitor.visitJumpInsn(IFNE, label33);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "OS_NAME", "Ljava/lang/String;");
            methodVisitor.visitLdcInsn("LINUX");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
            Label label34 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label34);
            methodVisitor.visitLabel(label33);
            methodVisitor.visitLineNumber(44, label33);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitVarInsn(ISTORE, 0);
            Label label35 = new Label();
            methodVisitor.visitLabel(label35);
            methodVisitor.visitJumpInsn(GOTO, label26);
            methodVisitor.visitLabel(label34);
            methodVisitor.visitLineNumber(46, label34);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitLdcInsn("Unknown operating system ");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "OS_NAME", "Ljava/lang/String;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label26);
            methodVisitor.visitLineNumber(50, label26);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.INTEGER}, 0, null);
            methodVisitor.visitInsn(ICONST_M1);
            methodVisitor.visitVarInsn(ISTORE, 1);
            Label label36 = new Label();
            methodVisitor.visitLabel(label36);
            methodVisitor.visitLineNumber(52, label36);
            methodVisitor.visitTypeInsn(NEW, "java/util/HashMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
            methodVisitor.visitVarInsn(ASTORE, 2);
            Label label37 = new Label();
            methodVisitor.visitLabel(label37);
            methodVisitor.visitLineNumber(53, label37);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitLdcInsn("x86");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            methodVisitor.visitInsn(POP);
            Label label38 = new Label();
            methodVisitor.visitLabel(label38);
            methodVisitor.visitLineNumber(54, label38);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitLdcInsn("i386");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            methodVisitor.visitInsn(POP);
            Label label39 = new Label();
            methodVisitor.visitLabel(label39);
            methodVisitor.visitLineNumber(55, label39);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitLdcInsn("i486");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            methodVisitor.visitInsn(POP);
            Label label40 = new Label();
            methodVisitor.visitLabel(label40);
            methodVisitor.visitLineNumber(56, label40);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitLdcInsn("i586");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            methodVisitor.visitInsn(POP);
            Label label41 = new Label();
            methodVisitor.visitLabel(label41);
            methodVisitor.visitLineNumber(57, label41);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitLdcInsn("i686");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            methodVisitor.visitInsn(POP);
            Label label42 = new Label();
            methodVisitor.visitLabel(label42);
            methodVisitor.visitLineNumber(58, label42);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitLdcInsn("x86_64");
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            methodVisitor.visitInsn(POP);
            Label label43 = new Label();
            methodVisitor.visitLabel(label43);
            methodVisitor.visitLineNumber(59, label43);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitLdcInsn("amd64");
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            methodVisitor.visitInsn(POP);
            Label label44 = new Label();
            methodVisitor.visitLabel(label44);
            methodVisitor.visitLineNumber(60, label44);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitLdcInsn("aarch64");
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            methodVisitor.visitInsn(POP);
            Label label45 = new Label();
            methodVisitor.visitLabel(label45);
            methodVisitor.visitLineNumber(61, label45);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitLdcInsn("powerpc");
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            methodVisitor.visitInsn(POP);
            Label label46 = new Label();
            methodVisitor.visitLabel(label46);
            methodVisitor.visitLineNumber(63, label46);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "OS_ARCH", "Ljava/lang/String;");
            methodVisitor.visitInsn(ICONST_M1);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Integer");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Integer", "intValue", "()I", false);
            methodVisitor.visitVarInsn(ISTORE, 1);
            Label label47 = new Label();
            methodVisitor.visitLabel(label47);
            methodVisitor.visitLineNumber(64, label47);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_M1);
            Label label48 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPNE, label48);
            Label label49 = new Label();
            methodVisitor.visitLabel(label49);
            methodVisitor.visitLineNumber(65, label49);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitLdcInsn("Unknown architecture ");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "OS_ARCH", "Ljava/lang/String;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label48);
            methodVisitor.visitLineNumber(70, label48);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 2, new Object[]{Opcodes.INTEGER, "java/util/Map"}, 0, null);
            methodVisitor.visitVarInsn(ILOAD, 0);
            Label label50 = new Label();
            Label label51 = new Label();
            Label label52 = new Label();
            Label label53 = new Label();
            methodVisitor.visitTableSwitchInsn(0, 3, label52, new Label[]{label50, label51, label52, label53});
            methodVisitor.visitLabel(label51);
            methodVisitor.visitLineNumber(72, label51);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_3);
            Label label54 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPNE, label54);
            Label label55 = new Label();
            methodVisitor.visitLabel(label55);
            methodVisitor.visitLineNumber(74, label55);
            methodVisitor.visitLdcInsn("/lock/driver-macos-m1.skid");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label56 = new Label();
            methodVisitor.visitLabel(label56);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label54);
            methodVisitor.visitLineNumber(76, label54);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitLdcInsn("/lock/driver-macos.skid");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label57 = new Label();
            methodVisitor.visitLabel(label57);
            methodVisitor.visitLineNumber(78, label57);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label53);
            methodVisitor.visitLineNumber(82, label53);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_3);
            Label label58 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPNE, label58);
            Label label59 = new Label();
            methodVisitor.visitLabel(label59);
            methodVisitor.visitLineNumber(84, label59);
            methodVisitor.visitLdcInsn("/lock/driver-lin-amd.skid");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label60 = new Label();
            methodVisitor.visitLabel(label60);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label58);
            methodVisitor.visitLineNumber(86, label58);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitLdcInsn("/lock/driver-lin.skid");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label61 = new Label();
            methodVisitor.visitLabel(label61);
            methodVisitor.visitLineNumber(88, label61);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label50);
            methodVisitor.visitLineNumber(92, label50);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_1);
            Label label62 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPEQ, label62);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_2);
            Label label63 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPNE, label63);
            methodVisitor.visitLabel(label62);
            methodVisitor.visitLineNumber(93, label62);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitLdcInsn("/lock/driver-win.skid");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label64 = new Label();
            methodVisitor.visitLabel(label64);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label63);
            methodVisitor.visitLineNumber(95, label63);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalStateException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitLdcInsn("Unknown architecture for windows ");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "OS_ARCH", "Ljava/lang/String;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalStateException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label52);
            methodVisitor.visitLineNumber(101, label52);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalStateException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitLdcInsn("Unknown arch: ");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitFieldInsn(GETSTATIC, "skid/Dispatcher", "OS_ARCH", "Ljava/lang/String;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalStateException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(108, label0);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/lang/String"}, 0, null);
            methodVisitor.visitLdcInsn("lib");
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/io/File", "createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;", false);
            methodVisitor.visitVarInsn(ASTORE, 4);
            Label label65 = new Label();
            methodVisitor.visitLabel(label65);
            methodVisitor.visitLineNumber(109, label65);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "deleteOnExit", "()V", false);
            Label label66 = new Label();
            methodVisitor.visitLabel(label66);
            methodVisitor.visitLineNumber(110, label66);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "exists", "()Z", false);
            methodVisitor.visitJumpInsn(IFNE, label1);
            Label label67 = new Label();
            methodVisitor.visitLabel(label67);
            methodVisitor.visitLineNumber(111, label67);
            methodVisitor.visitTypeInsn(NEW, "java/io/IOException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/IOException", "<init>", "()V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(116, label1);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/io/File"}, 0, null);
            Label label68 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label68);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(114, label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[]{Opcodes.INTEGER, Opcodes.INTEGER, "java/util/Map", "java/lang/String"}, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label69 = new Label();
            methodVisitor.visitLabel(label69);
            methodVisitor.visitLineNumber(115, label69);
            methodVisitor.visitTypeInsn(NEW, "java/lang/UnsatisfiedLinkError");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("Failed to create temp file");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label68);
            methodVisitor.visitLineNumber(117, label68);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/io/File"}, 0, null);
            methodVisitor.visitIntInsn(SIPUSH, 2048);
            methodVisitor.visitIntInsn(NEWARRAY, T_BYTE);
            methodVisitor.visitVarInsn(ASTORE, 5);
            methodVisitor.visitLabel(label15);
            methodVisitor.visitLineNumber(119, label15);
            methodVisitor.visitLdcInsn(Type.getType("Lskid/Dispatcher;"));
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", false);
            methodVisitor.visitVarInsn(ASTORE, 6);
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(120, label9);
            methodVisitor.visitTypeInsn(NEW, "java/io/FileOutputStream");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/FileOutputStream", "<init>", "(Ljava/io/File;)V", false);
            methodVisitor.visitVarInsn(ASTORE, 7);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(122, label3);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 3, new Object[]{"[B", "java/io/InputStream", "java/io/FileOutputStream"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "read", "([B)I", false);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ISTORE, 8);
            Label label70 = new Label();
            methodVisitor.visitLabel(label70);
            methodVisitor.visitInsn(ICONST_M1);
            methodVisitor.visitJumpInsn(IF_ICMPEQ, label4);
            Label label71 = new Label();
            methodVisitor.visitLabel(label71);
            methodVisitor.visitLineNumber(123, label71);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ILOAD, 8);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/OutputStream", "write", "([BII)V", false);
            methodVisitor.visitJumpInsn(GOTO, label3);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(125, label4);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            methodVisitor.visitJumpInsn(GOTO, label10);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(119, label5);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 8);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
            methodVisitor.visitLabel(label7);
            Label label72 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label72);
            methodVisitor.visitLabel(label8);
            methodVisitor.visitFrame(Opcodes.F_FULL, 9, new Object[]{Opcodes.INTEGER, Opcodes.INTEGER, "java/util/Map", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/io/FileOutputStream", "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 9);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
            methodVisitor.visitLabel(label72);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label10);
            methodVisitor.visitLineNumber(125, label10);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 2, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitJumpInsn(IFNULL, label16);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            methodVisitor.visitJumpInsn(GOTO, label16);
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(119, label11);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 7);
            methodVisitor.visitVarInsn(ALOAD, 6);
            Label label73 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label73);
            methodVisitor.visitLabel(label12);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            methodVisitor.visitLabel(label13);
            methodVisitor.visitJumpInsn(GOTO, label73);
            methodVisitor.visitLabel(label14);
            methodVisitor.visitFrame(Opcodes.F_FULL, 8, new Object[]{Opcodes.INTEGER, Opcodes.INTEGER, "java/util/Map", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 8);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
            methodVisitor.visitLabel(label73);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(128, label16);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 2, null, 0, null);
            Label label74 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label74);
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLineNumber(126, label17);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 6);
            Label label75 = new Label();
            methodVisitor.visitLabel(label75);
            methodVisitor.visitLineNumber(127, label75);
            methodVisitor.visitTypeInsn(NEW, "java/lang/UnsatisfiedLinkError");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitLdcInsn("Failed to copy file: ");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "getMessage", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label74);
            methodVisitor.visitLineNumber(129, label74);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getAbsolutePath", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "load", "(Ljava/lang/String;)V", false);
            Label label76 = new Label();
            methodVisitor.visitLabel(label76);
            methodVisitor.visitLineNumber(131, label76);
            methodVisitor.visitInsn(RETURN);
            Label label77 = new Label();
            methodVisitor.visitLabel(label77);
            methodVisitor.visitLocalVariable("os", "I", null, label25, label23, 0);
            methodVisitor.visitLocalVariable("os", "I", null, label29, label27, 0);
            methodVisitor.visitLocalVariable("os", "I", null, label32, label30, 0);
            methodVisitor.visitLocalVariable("os", "I", null, label35, label34, 0);
            methodVisitor.visitLocalVariable("driver", "Ljava/lang/String;", null, label56, label54, 3);
            methodVisitor.visitLocalVariable("driver", "Ljava/lang/String;", null, label57, label53, 3);
            methodVisitor.visitLocalVariable("driver", "Ljava/lang/String;", null, label60, label58, 3);
            methodVisitor.visitLocalVariable("driver", "Ljava/lang/String;", null, label61, label50, 3);
            methodVisitor.visitLocalVariable("driver", "Ljava/lang/String;", null, label64, label63, 3);
            methodVisitor.visitLocalVariable("file", "Ljava/io/File;", null, label65, label2, 4);
            methodVisitor.visitLocalVariable("iOException", "Ljava/io/IOException;", null, label69, label68, 5);
            methodVisitor.visitLocalVariable("n", "I", null, label70, label4, 8);
            methodVisitor.visitLocalVariable("fileOutputStream", "Ljava/io/FileOutputStream;", null, label3, label10, 7);
            methodVisitor.visitLocalVariable("inputStream", "Ljava/io/InputStream;", null, label9, label16, 6);
            methodVisitor.visitLocalVariable("iOException", "Ljava/io/IOException;", null, label75, label74, 6);
            methodVisitor.visitLocalVariable("os", "I", null, label26, label77, 0);
            methodVisitor.visitLocalVariable("arch", "I", null, label36, label77, 1);
            methodVisitor.visitLocalVariable("archMap", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", label37, label77, 2);
            methodVisitor.visitLocalVariable("driver", "Ljava/lang/String;", null, label0, label77, 3);
            methodVisitor.visitLocalVariable("file", "Ljava/io/File;", null, label68, label77, 4);
            methodVisitor.visitLocalVariable("byArray", "[B", null, label15, label77, 5);
            methodVisitor.visitMaxs(4, 10);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(10, label0);
            methodVisitor.visitLdcInsn("os.name");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", false);
            methodVisitor.visitFieldInsn(PUTSTATIC, "skid/Dispatcher", "OS_NAME", "Ljava/lang/String;");
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(11, label1);
            methodVisitor.visitLdcInsn("os.arch");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", false);
            methodVisitor.visitFieldInsn(PUTSTATIC, "skid/Dispatcher", "OS_ARCH", "Ljava/lang/String;");
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(12, label2);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(1, 0);
            methodVisitor.visitEnd();
        }
        classWriter.visitEnd();

        return classWriter.toByteArray();
    }
}
